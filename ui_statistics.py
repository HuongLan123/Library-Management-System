import tkinter as tk
from tkinter import ttk, messagebox
import datetime # Cho c√°c thao t√°c ng√†y th√°ng
import sqlite3
db_connection = sqlite3.connect("library3.db") # K·∫øt n·ªëi CSDL SQLite
# ==============================================================================
# IMPORT C√ÅC L·ªöP CTDL T·ª∞ C√ÄI ƒê·∫∂T V√Ä ƒê·ªêI T∆Ø·ª¢NG
# ==============================================================================
try:
    from ui_books import HashTable as BookHashTable, Book 

    from ui_readers import Reader 
 
    from ui_loans import LoanBST, TreeNode, LoanRecord, LoanManager 
except ImportError as e:
    messagebox.showerror("L·ªói Import (Module 4)", f"Kh√¥ng th·ªÉ import CTDL/ƒê·ªëi t∆∞·ª£ng c·∫ßn thi·∫øt: {e}\nKi·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n v√† t√™n file.")


# ==============================================================================
# GI·∫¢I THU·∫¨T T·ª∞ C√ÄI ƒê·∫∂T 
# ==============================================================================
def self_implemented_merge_sort(data_list, key_func=None, reverse=False):
    """S·∫Øp x·∫øp danh s√°ch b·∫±ng Merge Sort t·ª± c√†i ƒë·∫∑t."""
    
    def merge_sort(arr):
        if len(arr) <= 1:
            return arr
        mid = len(arr) // 2
        left = merge_sort(arr[:mid])
        right = merge_sort(arr[mid:])
        return merge(left, right)

    def merge(left, right):
        merged = []
        i = j = 0
        while i < len(left) and j < len(right):
            a = key_func(left[i]) if key_func else left[i]
            b = key_func(right[j]) if key_func else right[j]
            if (a <= b) ^ reverse:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1
        merged.extend(left[i:])
        merged.extend(right[j:])
        return merged

    return merge_sort(data_list)


def self_implemented_count_frequencies(list_of_objects, attribute_name_to_count):
    """ƒê·∫øm t·∫ßn su·∫•t c·ªßa m·ªôt thu·ªôc t√≠nh trong danh s√°ch ƒë·ªëi t∆∞·ª£ng."""
    frequency_map_list = [] # List c√°c tuple (gi√° tr·ªã thu·ªôc t√≠nh, s·ªë l·∫ßn ƒë·∫øm)
    if not list_of_objects:
        return frequency_map_list
    for obj_item in list_of_objects:
        try:
            key_to_count = getattr(obj_item, attribute_name_to_count)
        except AttributeError:
            print(f"C·∫£nh b√°o (ƒê·∫øm t·∫ßn su·∫•t): ƒê·ªëi t∆∞·ª£ng {type(obj_item)} kh√¥ng c√≥ thu·ªôc t√≠nh '{attribute_name_to_count}'.")
            continue
        found_in_map = False
        for i, entry in enumerate(frequency_map_list):
            if entry[0] == key_to_count:
                frequency_map_list[i] = (entry[0], entry[1] + 1)
                found_in_map = True
                break
        if not found_in_map:
            frequency_map_list.append((key_to_count, 1))
    return frequency_map_list

# ==============================================================================
# UI MODULE 4 - B√ÅO C√ÅO & TH·ªêNG K√ä
# ==============================================================================

def create_statistics_tab(notebook, db_connection):
    """
    T·∫°o tab B√°o c√°o & Th·ªëng k√™.
    D·ªØ li·ªáu ƒë∆∞·ª£c n·∫°p t·ª´ CSDL v√†o c√°c CTDL RAM ri√™ng c·ªßa Module 4 khi nh·∫•n "L√†m m·ªõi".
    C√°c h√†m th·ªëng k√™ ho·∫°t ƒë·ªông tr√™n c√°c CTDL RAM n√†y.
    """
    tab = ttk.Frame(notebook)
    notebook.add(tab, text="üìä B√°o c√°o & Th·ªëng k√™")

    # C√°c instance CTDL trong b·ªô nh·ªõ, d√†nh ri√™ng cho Module 4 n√†y
    # S·∫Ω ƒë∆∞·ª£c n·∫°p d·ªØ li·ªáu khi ng∆∞·ªùi d√πng nh·∫•n "L√†m m·ªõi"
    ht_books_stats = BookHashTable() # S·ª≠ d·ª•ng HashTable t·ª´ ui_books
    ht_readers_stats = BookHashTable() # Gi·∫£ s·ª≠ d√πng chung ki·ªÉu HashTable cho b·∫°n ƒë·ªçc
    
    # LoanManager_stats s·∫Ω qu·∫£n l√Ω LoanBST cho ri√™ng Module 4 n√†y
    # Kh·ªüi t·∫°o LoanManager m√† kh√¥ng c·∫ßn ht_books, ht_readers c·ªßa c√°c module kh√°c
    # v√¨ n√≥ s·∫Ω d√πng ht_books_stats v√† ht_readers_stats c·ªßa ri√™ng m√¨nh.
    # N·∫øu constructor c·ªßa LoanManager y√™u c·∫ßu, b·∫°n c√≥ th·ªÉ truy·ªÅn ch√∫ng v√†o.
    loan_manager_stats = LoanManager(db_connection)
                                     # Ho·∫∑c LoanManager() n·∫øu constructor cho ph√©p

    # --- Giao di·ªán ---
    output_text_area = tk.Text(tab, width=120, height=28, wrap=tk.WORD, font=("Consolas", 10), relief=tk.SUNKEN, borderwidth=1)
    output_text_area.grid(row=0, column=0, columnspan=3, padx=10, pady=(10,0), sticky="nsew")
    
    scrollbar = ttk.Scrollbar(tab, orient="vertical", command=output_text_area.yview)
    scrollbar.grid(row=0, column=3, sticky="ns", pady=(10,0))
    output_text_area.config(yscrollcommand=scrollbar.set)

    tab.grid_rowconfigure(0, weight=1) # Cho Text widget co gi√£n
    for i in range(3): 
        tab.grid_columnconfigure(i, weight=1)

    # --- H√†m n·∫°p d·ªØ li·ªáu t·ª´ CSDL v√†o CTDL c·ªßa Module 4 ---
    def refresh_data_for_statistics_command():
        ht_books_stats.size = 0 
        ht_books_stats.table = [type(ht_books_stats.table[0])() for _ in range(ht_books_stats.capacity)] # T·∫°o l·∫°i list c√°c LinkedListForHash r·ªóng

        ht_readers_stats.size = 0
        ht_readers_stats.table = [type(ht_readers_stats.table[0])() for _ in range(ht_readers_stats.capacity)]
        
        loan_manager_stats.loans.root = None # Reset c√¢y AVL
        loan_manager_stats.loan_id_counter = 1 # Reset counter

        cursor = db_connection.cursor()
        loaded_books_count = 0
        loaded_readers_count = 0
        loaded_loans_count = 0

        # N·∫°p s√°ch
        try:
            for row in cursor.execute("SELECT isbn, title, author, year, quantity, available_quantity FROM books"):
                book = Book(row[0], row[1], row[2], int(row[3]), int(row[4]))
                book.available_quantity = int(row[5]) # G√°n l·∫°i t·ª´ CSDL
                ht_books_stats.insert(book.isbn, book)
                loaded_books_count += 1
        except Exception as e:
            messagebox.showerror("L·ªói N·∫°p S√°ch (Stats)", f"Kh√¥ng th·ªÉ n·∫°p s√°ch: {e}")
            return

        # N·∫°p b·∫°n ƒë·ªçc
        try:
            for row in cursor.execute("SELECT reader_id, name, birth_date, address FROM readers"):
                reader = Reader(row[0], row[1], row[2], row[3])
                ht_readers_stats.insert(reader.reader_id, reader)
                loaded_readers_count += 1
        except Exception as e:
            messagebox.showerror("L·ªói N·∫°p B·∫°n ƒê·ªçc (Stats)", f"Kh√¥ng th·ªÉ n·∫°p b·∫°n ƒë·ªçc: {e}")
            return
            
        # N·∫°p phi·∫øu m∆∞·ª£n v√†o LoanBST c·ªßa loan_manager_stats
        try:
            max_loan_id_db = 0
            for row in cursor.execute("SELECT loan_id, reader_id, isbn, borrow_date, due_date, return_date, status FROM loans"):
                try:
                    loan_id_from_db = int(row[0])
                    if loan_id_from_db > max_loan_id_db: max_loan_id_db = loan_id_from_db
                    #date.strftime("%Y-%m-%d %H:%M:%S.%f")
                    borrow_date_obj = datetime.datetime.strptime(row[3], "%Y-%m-%d %H:%M:%S.%f").date() if row[3] else None
                    due_date_obj = datetime.datetime.strptime(row[4], "%Y-%m-%d %H:%M:%S.%f").date() if row[4] else None
                    return_date_obj = datetime.datetime.strptime(row[5], "%Y-%m-%d %H:%M:%S.%f").date() if row[5] else None
                    
                    if borrow_date_obj and due_date_obj: # Ng√†y m∆∞·ª£n v√† h·∫°n tr·∫£ l√† b·∫Øt bu·ªôc
                        # T·∫°o LoanRecord v·ªõi loan_id t·ª´ CSDL
                        loan = LoanRecord(loan_id_from_db, row[1], row[2], borrow_date_obj, due_date_obj, return_date_obj, row[6])
                        loan_manager_stats.loans.insert(loan) # S·ª≠ d·ª•ng insert c·ªßa Loanloans
                        loaded_loans_count += 1
                    else:
                        print(f"C·∫£nh b√°o (Stats): Phi·∫øu m∆∞·ª£n {row[0]} thi·∫øu ng√†y m∆∞·ª£n/h·∫°n tr·∫£, b·ªè qua.")
                except ValueError as ve:
                    print(f"C·∫£nh b√°o (Stats): Phi·∫øu m∆∞·ª£n {row[0]} c√≥ ƒë·ªãnh d·∫°ng ng√†y l·ªói ({ve}), b·ªè qua.")
            
            loan_manager_stats.loan_id_counter = max_loan_id_db + 1 # C·∫≠p nh·∫≠t counter
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i phi·∫øu m∆∞·ª£n sau khi n·∫°p
            today = datetime.datetime.now().date()
            for record in loan_manager_stats.loans.inorder(): # Duy·ªát c√¢y
                if record.return_date: record.status = "ƒê√£ tr·∫£"
                elif record.due_date and record.due_date < today: record.status = "Qu√° h·∫°n"
                elif not record.return_date: record.status = "ƒêang m∆∞·ª£n"
            
        except Exception as e:
            messagebox.showerror("L·ªói N·∫°p Phi·∫øu M∆∞·ª£n (Stats)", f"Kh√¥ng th·ªÉ n·∫°p phi·∫øu m∆∞·ª£n: {e}")
            return
            
        messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ l√†m m·ªõi d·ªØ li·ªáu cho th·ªëng k√™ t·ª´ CSDL.\nS√°ch: {loaded_books_count}, B·∫°n ƒë·ªçc: {loaded_readers_count}, Phi·∫øu m∆∞·ª£n: {loaded_loans_count}")
        clear_output_area_command()
        output_text_area.insert(tk.END, "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi. Vui l√≤ng ch·ªçn l·∫°i ch·ª©c nƒÉng th·ªëng k√™.\n")

    # --- C√°c h√†m th·ªëng k√™ (ho·∫°t ƒë·ªông tr√™n ht_books_stats, ht_readers_stats, loan_manager_stats) ---
    def clear_output_area_command():
        output_text_area.delete("1.0", tk.END)

    def display_top_n_books_command():
        clear_output_area_command()
        # Ki·ªÉm tra xem ƒë√£ n·∫°p d·ªØ li·ªáu ch∆∞a
        if ht_books_stats.size == 0 and not loan_manager_stats.loans.inorder():
            messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
            return
        n_top = 10
        all_loan_records = loan_manager_stats.loans.inorder()
        if not all_loan_records:
            output_text_area.insert(tk.END, "Ch∆∞a c√≥ d·ªØ li·ªáu m∆∞·ª£n s√°ch ƒë·ªÉ th·ªëng k√™.\n"); return

        isbn_frequencies = self_implemented_count_frequencies(all_loan_records, "isbn")
        if not isbn_frequencies:
            output_text_area.insert(tk.END, "Kh√¥ng c√≥ ISBN n√†o ƒë∆∞·ª£c ghi nh·∫≠n m∆∞·ª£n.\n"); return
            
        sorted_top_books_data = self_implemented_merge_sort(list(isbn_frequencies), key_func=lambda pair: pair[1], reverse=True)

        output_text_area.insert(tk.END, f"--- Top {n_top} S√°ch ƒê∆∞·ª£c M∆∞·ª£n Nhi·ªÅu Nh·∫•t ---\n")
        for i, (isbn, count) in enumerate(sorted_top_books_data[:n_top], 1):
            book_object = ht_books_stats.search(isbn)
            title = book_object.title if book_object else f"[S√°ch ISBN {isbn} kh√¥ng t√¨m th·∫•y]"
            output_text_area.insert(tk.END, f"H·∫°ng {i}: {title} (ISBN: {isbn}) - S·ªë l∆∞·ª£t m∆∞·ª£n: {count}\n")

    def display_top_n_readers_command():
        clear_output_area_command()
        if ht_readers_stats.size == 0 and not loan_manager_stats.loans.inorder():
            messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
            return
        n_top = 10
        all_loan_records = loan_manager_stats.loans.inorder()
        if not all_loan_records:
            output_text_area.insert(tk.END, "Ch∆∞a c√≥ d·ªØ li·ªáu m∆∞·ª£n s√°ch ƒë·ªÉ th·ªëng k√™.\n"); return

        reader_id_frequencies = self_implemented_count_frequencies(all_loan_records, "reader_id")
        if not reader_id_frequencies:
            output_text_area.insert(tk.END, "Kh√¥ng c√≥ b·∫°n ƒë·ªçc n√†o m∆∞·ª£n s√°ch.\n"); return
            
        sorted_top_readers_data = self_implemented_merge_sort(list(reader_id_frequencies), key_func=lambda pair: pair[1], reverse=True)

        output_text_area.insert(tk.END, f"--- Top {n_top} B·∫°n ƒê·ªçc M∆∞·ª£n S√°ch Nhi·ªÅu Nh·∫•t ---\n")
        for i, (reader_id, count) in enumerate(sorted_top_readers_data[:n_top], 1):
            reader_object = ht_readers_stats.search(reader_id)
            name = reader_object.name if reader_object else f"[B·∫°n ƒë·ªçc m√£ {reader_id} kh√¥ng t√¨m th·∫•y]"
            output_text_area.insert(tk.END, f"H·∫°ng {i}: {name} (M√£: {reader_id}) - S·ªë l∆∞·ª£t m∆∞·ª£n: {count}\n")
    
    def display_total_books_stats_command():
        clear_output_area_command()
        if ht_books_stats.size == 0:
             messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
             return
        num_titles = ht_books_stats.size
        all_book_objects = ht_books_stats.get_all_values()
        total_copies = sum(book.quantity for book in all_book_objects if book) if all_book_objects else 0
        output_text_area.insert(tk.END, "--- Th·ªëng K√™ T·ªïng S·ªë S√°ch ---\n")
        output_text_area.insert(tk.END, f"T·ªïng s·ªë ƒë·∫ßu s√°ch trong th∆∞ vi·ªán: {num_titles}\n")
        output_text_area.insert(tk.END, f"T·ªïng s·ªë cu·ªën s√°ch trong th∆∞ vi·ªán: {total_copies}\n")

    def display_total_readers_stats_command():
        clear_output_area_command()
        if ht_readers_stats.size== 0:
             messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
             return
        count = ht_readers_stats.size
        output_text_area.insert(tk.END, "--- Th·ªëng K√™ T·ªïng S·ªë B·∫°n ƒê·ªçc ---\n")
        output_text_area.insert(tk.END, f"T·ªïng s·ªë b·∫°n ƒë·ªçc ƒë√£ ƒëƒÉng k√Ω: {count}\n")

    def display_books_currently_loaned_stats_command():
        clear_output_area_command()
        all_loan_records = loan_manager_stats.loans.inorder()
        if not all_loan_records:
             messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
             return
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc khi ƒë·∫øm
        today = datetime.datetime.now().date()
        for record in all_loan_records:
            if record.return_date: record.status = "ƒê√£ tr·∫£"
            elif record.due_date and record.due_date < today: record.status = "Qu√° h·∫°n"
            elif not record.return_date: record.status = "ƒêang m∆∞·ª£n"
            
        count = sum(1 for loan in all_loan_records if loan and (loan.status == "ƒêang m∆∞·ª£n" or loan.status == "Qu√° h·∫°n"))
        output_text_area.insert(tk.END, "--- Th·ªëng K√™ S√°ch ƒêang ƒê∆∞·ª£c M∆∞·ª£n ---\n")
        output_text_area.insert(tk.END, f"T·ªïng s·ªë s√°ch hi·ªán ƒëang ƒë∆∞·ª£c m∆∞·ª£n (bao g·ªìm qu√° h·∫°n): {count}\n")

    def display_books_overdue_stats_command():
        clear_output_area_command()
        all_loan_records = loan_manager_stats.loans.inorder()
        if not all_loan_records:
             messagebox.showwarning("Ch∆∞a c√≥ d·ªØ li·ªáu", "Vui l√≤ng 'L√†m m·ªõi D·ªØ li·ªáu Th·ªëng k√™' tr∆∞·ªõc.")
             return

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc khi ƒë·∫øm
        today = datetime.datetime.now().date()
        for record in all_loan_records:
            if record.return_date: record.status = "ƒê√£ tr·∫£"
            elif record.due_date and record.due_date < today: record.status = "Qu√° h·∫°n"
            elif not record.return_date: record.status = "ƒêang m∆∞·ª£n"

        count = sum(1 for loan in all_loan_records if loan and loan.status == "Qu√° h·∫°n")
        output_text_area.insert(tk.END, "--- Th·ªëng K√™ S√°ch ƒê√£ Qu√° H·∫°n Tr·∫£ ---\n")
        output_text_area.insert(tk.END, f"T·ªïng s·ªë s√°ch ƒë√£ qu√° h·∫°n tr·∫£: {count}\n")

    # --- T·∫°o c√°c n√∫t b·∫•m ---
    controls_frame = ttk.Frame(tab)
    controls_frame.grid(row=1, column=0, columnspan=3, pady=5, sticky="ew")

    btn_refresh_data = ttk.Button(controls_frame, text="üîÑ L√ÄM M·ªöI D·ªÆ LI·ªÜU TH·ªêNG K√ä T·ª™ CSDL", command=refresh_data_for_statistics_command, style="Accent.TButton")
    btn_refresh_data.pack(fill=tk.X, padx=5, pady=(5,10))
    
    stats_buttons_frame = ttk.Frame(controls_frame)
    stats_buttons_frame.pack(fill=tk.X, expand=True)
    stats_buttons_frame.columnconfigure(0, weight=1); stats_buttons_frame.columnconfigure(1, weight=1)

    btn_top_books = ttk.Button(stats_buttons_frame, text="üèÜ Top S√°ch M∆∞·ª£n Nhi·ªÅu", command=display_top_n_books_command)
    btn_top_books.grid(row=0, column=0, padx=5, pady=2, sticky="ew")
    btn_top_readers = ttk.Button(stats_buttons_frame, text="ü•á Top B·∫°n ƒê·ªçc M∆∞·ª£n Nhi·ªÅu", command=display_top_n_readers_command)
    btn_top_readers.grid(row=0, column=1, padx=5, pady=2, sticky="ew")
    
    btn_total_books = ttk.Button(stats_buttons_frame, text="üìö T·ªïng S·ªë S√°ch", command=display_total_books_stats_command)
    btn_total_books.grid(row=1, column=0, padx=5, pady=2, sticky="ew")
    btn_total_readers = ttk.Button(stats_buttons_frame, text="üë• T·ªïng S·ªë B·∫°n ƒê·ªçc", command=display_total_readers_stats_command)
    btn_total_readers.grid(row=1, column=1, padx=5, pady=2, sticky="ew")
    
    btn_currently_loaned = ttk.Button(stats_buttons_frame, text="‚è≥ S√°ch ƒêang M∆∞·ª£n", command=display_books_currently_loaned_stats_command)
    btn_currently_loaned.grid(row=2, column=0, padx=5, pady=2, sticky="ew")
    btn_overdue = ttk.Button(stats_buttons_frame, text="‚è∞ S√°ch Qu√° H·∫°n Tr·∫£", command=display_books_overdue_stats_command)
    btn_overdue.grid(row=2, column=1, padx=5, pady=2, sticky="ew")
    
    btn_clear = ttk.Button(controls_frame, text="üóëÔ∏è X√≥a K·∫øt Qu·∫£ Hi·ªÉn Th·ªã", command=clear_output_area_command)
    btn_clear.pack(fill=tk.X, padx=5, pady=(10,5))
    
    # Th√™m style cho n√∫t (t√πy ch·ªçn, c·∫ßn import ttk.Style)
    # style = ttk.Style()
    # style.configure("Accent.TButton", foreground="blue", font=('Helvetica', 10, 'bold'))

    output_text_area.insert(tk.END, "Ch√†o m·ª´ng ƒë·∫øn Tab Th·ªëng k√™!\n\n"
                                    "ƒê·ªÉ xem c√°c s·ªë li·ªáu m·ªõi nh·∫•t, vui l√≤ng nh·∫•n n√∫t:\n"
                                    "'L√ÄM M·ªöI D·ªÆ LI·ªÜU TH·ªêNG K√ä T·ª™ CSDL'\n\n"
                                    "Sau ƒë√≥, b·∫°n c√≥ th·ªÉ ch·ªçn c√°c ch·ª©c nƒÉng th·ªëng k√™ b√™n d∆∞·ªõi.\n")
